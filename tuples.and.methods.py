# درس امروز آشنایی و یادگیری tuples در زبان پایتون
print('آموزش تاپل و آشنایی با ساختار و متدهای آن')

print('-----------------------------------')
# نمونه و سینتکس یک tuple در پایتون
my_tuple = (1,2,'hello', True)
print(my_tuple)

print('-----------------------------------')
# همانطور که دقت کردید تاپل ها از بعض جهات خیلی شبیه به لیست ها هست مقادیر درون یک بلوک قرار میگیرند و انواع داده ها درون یک تاپل ذخیره میشوند ولی یک تفاوت بسیار مهم بین لیست ها و تاپل ها است

# لیست ها مقادیرشان قابل تعقیر هستند مثل زیر
# mutable
# یعنی تعقیر پذیر است
my_list1 = ["ali", 2, True]
my_list1 = [2,4, False, "reza"]
print(my_list1)

print('-----------------------------------')
# و برگردیم سراغ تاپل ها که مهمترین تفاوت تاپل ها این است که وقتی یک تاپل را برای اولین بار با هرمقادیری تعریف میکنیم دیگر نمیتوانیم آن را تعقیر دهیم و تعقیر هر مقدار آن خطا برمیگرداند
# immutable
# یعنی یک بار بار مقادیری که تعریف شد دیگر قابل تعقیر نیست
my_tuple1 = ('Tina', 28, True)
print(my_tuple1)

print('-----------------------------------')

# کاربرد تاپل در کدنویسی
# تاپل ها برای تعریف مقادیر ثابت مفید هستند مثلا روز های هفته که در بعضی پروژه ها بصورت ثابت تعریف میشوند و نباید تعقیر کنند
# روزهای هفته
days_of_week = ("Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
print(days_of_week)

print('-----------------------------------')

# متدهایی که روی تاپل ها قابل اجرا هستند
# متد count()
# با متد count در درس قبلی که متدها در لیست ها بود آسنا شدیم که تعداد تکرار مقادیر در لیست یا تاپل رو برمیگردونه
my_tuple = (1, 2, 3, 2, 4, 2)
result = my_tuple.count(2)  # تعداد تکرار عدد 2
print(result)  # خروجی: 3

print('-----------------------------------')
# متد index رو هم همانطور که در لیست ها یادگرفتیم موقعیت مقادیر در یک لیست یا تاپل رو به ما برمیگردونه
my_tuple = ("apple", "banana", "cherry", "banana")
result = my_tuple.index("banana")  # موقعیت "banana"
print(result)  # خروجی: 1

# دسترسی به عناصر تاپل برای استفاده از ایندکس از اندیس استفاده میکنیم که اندیس ها از صفر شروع میشود 
my_tuple = ("A", "B", "C", "D")
first_item = my_tuple[0]  # اولین عنصر
second_item = my_tuple[1]  # دومین عنصر
last_item = my_tuple[-1]  # آخرین عنصر

print(first_item)  # خروجی: A
print(second_item)  # خروجی: B
print(last_item)  # خروجی: D

print('-----------------------------------')

# تفکیک تاپل یا unpacking
# شما میتوانید برای هریک از عناصر داخل یک تاپل یه متغیر جداگانه تعریف کنید به کد زیر دقت کنید
person = ("Ali", 25, "Tehran")
name, age, city = person

print(name)  # خروجی: Ali
print(age)   # خروجی: 25
print(city)  # خروجی: Tehran

print('-----------------------------------')

# یک نکته کلیدی
# معمولا برنامه نویس ها برای تعقیر مقادیر یک تاپل با تعقیر دادن ماهیت تاپل و تعقیر اون به لیست مبادرت به تعقیر مفادیر تاپل نموده بعد از تعقیرات دوباره ماهیت آن را به تاپل برمیگردانند
my_tuple = (1, 2, 3)
print(my_tuple)
my_list = list(my_tuple)  # تبدیل به لیست
my_list.append(4)  # اضافه کردن عدد 4
new_tuple = tuple(my_list)  # تبدیل به تاپل

print(new_tuple)  # خروجی: (1, 2, 3, 4)

#پس یاد گرفتیم چطور یک تاپل تعریف میشه و معمولا برای چه کاری استفاده میشه و با متدهای آن آشنا شدیم و مهمتر اینکه تاپل ها را نمیتوان تعقیر داد 