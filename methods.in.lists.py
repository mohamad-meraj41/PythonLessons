# در این درس با متدهایی که برای عملیات های مختلف روی لیست ها انجام میشوند آشنا خواهیم شد 
print('------------------ مثال اول')

# همانطور که میدونید لیست ها مجموعه از متغیرها را در خود ذخیره میکنند که شامل متغیرهای رشته ها و اعداد و بولین هستند
any_list = ['apple', True, 33, 22.30, False, 'babana']
print(any_list)

print('------------------ مثال دوم')
# و یک مطلب خیلی مهم اینکه در لیست ها مقادیر تکراری چه از نوع رشته و عدد و بولین رو میتوان درون یک لیست قرار داد 
repeat_list = ['reza', 2, 'reza', 2, False, True, False]
print(repeat_list)

print('------------------ مثال سوم')
# count()
# این متد تعداد مقدارهاز تکراری را درون یک لیست حساب میکند و برمیگرداند
# در لیست زیر با استفاده از متد count() میتوان بررسی کرد یک مقدار خاص در لیست چند بار تکرار شده

duplicate_numbers = [1,3,2,3,6,3]
print(duplicate_numbers.count(3))

print('------------------ مثال چهارم')
# index
# در پایتون چه در متغیرها و لیست ها متدی وجود دارد که با استفاده از آن موقعیت یک مقدار را درون یک متغیر بدست آورد که به آن ایندکس میگویند
# ایندکس یعنی محل قرارگیری مقدارها درون یک متغیر یا لیست که از صفر شروع میشود موقعیت اولین مقدار در لیست صفر است به مثال زیر دقت کنید
index1 = 'ali'
print(index1[0])
print(index1[1])
print(index1[2])

print('------------------ مثال پنجم')
# یا به لیست زیر دقت کنید که با ایندکس میتوان به موقعیت یک مقدار در لیست دست پیدا کرد
list3 = ['a', 'b', 'c', 'd']
print(list3.index('a'))
print(list3.index('b'))
print(list3.index('c'))
print(list3.index('d'))

colors = ['red', 'blue', 'green', 'pink']

# در زیر بجای ایندکس از براکت و شماره ایندکس موقعیت یک مقدار رو بهش دادیم ببینید چی برمیگردونه
print(colors[0])
print(colors[1])
print(colors[2])
print(colors[3])


print('------------------ مثال ششم')
# append()
# با این متد میتوانیم یک مقدار جدید به لیست اضافه کنیم

list5 = ['book1', 'book2', 'book3']
print(list5)

list5.append('book4')
print(list5)

# another example

#before
nums_list = [1,2,3,4]
print(nums_list)

# after
nums_list.append(5)
print(nums_list)


print('------------------ مثال هفتم')
# pop()
# این متد عنصری را براساس ایندکسی که به آن میدهیم از لیست حذف میکند و اگر ایندکس داده نشود آخرین عنصر از لیست را حذف میکند 
my_list = [1, 2, 3]
removed_element = my_list.pop(1)
print(my_list)         # [1, 3]
print(removed_element)  # 2


print('------------------ مثال هشتم')
# insert()
# این متد عنصری را در موقعیت ایندکسی که به آن میدهیم درون لیست اضافه میکند
my_list = [1, 2, 3]
my_list.insert(1, 'A')
print(my_list)  # [1, 'A', 2, 3]


print('------------------ مثال نهم')
# sort()
# این متد لیست را بصورت مرتب شده تعقیر میدهد
numbers1 = [4,2,6,3,1,5]
numbers1.sort()
print(numbers1)  # [1, 2, 3, 4]


print('------------------ مثال دهم')
# extend()
# عناصر یک لیست دیگر را به عناصر لیست جاری اضافه میکند 
my_list = [1, 2, 3]
my_list.extend([4, 5, 6])
print(my_list)  # [1, 2, 3, 4, 5, 6]


print('------------------ مثال یازدهم')
# با متد sort() و reverse که درون sort پاس میدیم میتوانیم مقادیر یک لیست تا برعکس یا معکوس کنیم
numbers1.sort(reverse=True)
print(numbers1)  # [4, 3, 2, 1]

print('------------------ مثال دوازدهم')
# reverse()
# همانطور که متوجه شدید با متد reverse میتوان مقادیر یک متغیر یا لیست را بصورت برعکس یا معکوس دریافت کرد
my_list = [1, 2, 3]
my_list.reverse()
print(my_list)  # [3, 2, 1]


print('------------------ مثال سیزدهم')
# copy()
# این متد یک کپی مستقل از متغیر یا لیست ایجاد میکند
my_list = [1, 2, 3]
new_list = my_list.copy()
new_list.append(4)
print(my_list)  # [1, 2, 3]
print(new_list) # [1, 2, 3, 4]


print('------------------ مثال چهاردهم')
# با دو متد in و not in میتوان بررسی کرد که آیا مقداری خاص درون یک متغیر یا لیست وجود دارد یاخیر که بصورت بولین برمیگرداند جواب را 
my_list = [1, 2, 3]
print(2 in my_list)      # True
print(4 not in my_list)  # True


print('------------------ مثال پانزدهم')
#clear()
# با این متد میتوان تمام عناصر و مقادیر یک لیست را بطور کامل حذف کرد
my_colors = ['blue', 'green', 'yellow']
my_colors.clear()
print(my_colors)
